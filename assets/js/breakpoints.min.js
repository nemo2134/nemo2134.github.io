/* breakpoints.js v1.0 | @ajlkn | MIT licensed */

var breakpoints = (function() {
    "use strict";

    // Main object with properties and methods
    var main = {
        list: null,
        media: {},
        events: [],

        // Initializes the breakpoints with a given list
        init: function(list) {
            main.list = list;
            // Add event listeners for various window changes
            window.addEventListener("resize", main.poll);
            window.addEventListener("orientationchange", main.poll);
            window.addEventListener("load", main.poll);
            window.addEventListener("fullscreenchange", main.poll);
        },

        // Checks if a specific breakpoint is active
        active: function(query) {
            var mode, key, min, max, unit, queryStr;
            // Process the query
            if (!(query in main.media)) {
                // Parse the query for mode and key
                if (query.startsWith(">=")) {
                    mode = "gte";
                    key = query.substr(2);
                } else if (query.startsWith("<=")) {
                    mode = "lte";
                    key = query.substr(2);
                } else if (query.startsWith(">")) {
                    mode = "gt";
                    key = query.substr(1);
                } else if (query.startsWith("<")) {
                    mode = "lt";
                    key = query.substr(1);
                } else if (query.startsWith("!")) {
                    mode = "not";
                    key = query.substr(1);
                } else {
                    mode = "eq";
                    key = query;
                }

                // Construct the media query based on the mode and key
                if (key && key in main.list) {
                    // ... Code to construct the media query string ...
                }

                // Store the constructed query string
                main.media[query] = queryStr ? queryStr : false;
            }

            // Return if the constructed media query matches
            return main.media[query] !== false && window.matchMedia(main.media[query]).matches;
        },

        // Adds a handler for a specific breakpoint query
        on: function(query, handler) {
            main.events.push({ query: query, handler: handler, state: false });
            if (main.active(query)) {
                handler();
            }
        },

        // Polls the current state of the breakpoints
        poll: function() {
            var event;
            for (var i = 0; i < main.events.length; i++) {
                event = main.events[i];
                if (main.active(event.query)) {
                    if (!event.state) {
                        event.state = true;
                        event.handler();
                    }
                } else if (event.state) {
                    event.state = false;
                }
            }
        }
    };

    // Public API for the breakpoints module
    var api = function(settings) {
        main.init(settings);
    };

    api._ = main;
    api.on = function(query, handler) {
        main.on(query, handler);
    };
    api.active = function(query) {
        return main.active(query);
    };

    return api;
})();

// Module definition for different environments (AMD, CommonJS, Global)
(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.breakpoints = factory();
    }
}(this, function() {
    return breakpoints;
}));
