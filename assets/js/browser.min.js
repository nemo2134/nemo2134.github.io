/* browser.js v1.0.1 | @ajlkn | MIT licensed */

var browser = (function() {
    "use strict";

    var browserObj = {
        name: null,
        version: null,
        os: null,
        osVersion: null,
        touch: null,
        mobile: null,
        _canUse: null,

        // Function to check if a CSS feature is usable in the current browser
        canUse: function(feature) {
            if (!browserObj._canUse) {
                browserObj._canUse = document.createElement("div");
            }
            var style = browserObj._canUse.style,
                featureCapitalized = feature.charAt(0).toUpperCase() + feature.slice(1);
            return feature in style || 
                   ("Moz" + featureCapitalized in style) ||
                   ("Webkit" + featureCapitalized in style) ||
                   ("O" + featureCapitalized in style) ||
                   ("ms" + featureCapitalized in style);
        },

        // Initialize function to detect browser properties
        init: function() {
            var userAgent = navigator.userAgent,
                name = "other",
                version = 0,
                osName = "other",
                osVersion = 0,
                browsers = [
                    ["firefox", /Firefox\/([0-9\.]+)/],
                    // ... Other browsers ...
                ],
                oses = [
                    ["ios", /([0-9_]+) like Mac OS X/, function(ver) { return ver.replace("_", ".").replace("_", "."); }],
                    // ... Other OSes ...
                ];

            // Detect browser
            for (var i = 0; i < browsers.length; i++) {
                if (userAgent.match(browsers[i][1])) {
                    name = browsers[i][0];
                    version = parseFloat(RegExp.$1);
                    break;
                }
            }

            // Detect OS
            for (var i = 0; i < oses.length; i++) {
                if (userAgent.match(oses[i][1])) {
                    osName = oses[i][0];
                    osVersion = parseFloat(oses[i][2] ? oses[i][2](RegExp.$1) : RegExp.$1);
                    break;
                }
            }

            // Special case for certain Apple devices
            if (osName === "mac" && "ontouchstart" in window) {
                // ... Special case logic ...
            }

            // Set detected properties
            browserObj.os = osName;
            browserObj.osVersion = osVersion;
            browserObj.touch = (osName === "wp") ? (navigator.msMaxTouchPoints > 0) : !!("ontouchstart" in window);
            browserObj.mobile = (osName === "wp" || osName === "android" || osName === "ios" || osName === "bb");
        }
    };

    // Initialize the browser object
    browserObj.init();

    return browserObj;
})();

// Module definition for different environments (AMD, CommonJS, Global)
(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.browser = factory();
    }
}(this, function() {
    return browser;
}));
